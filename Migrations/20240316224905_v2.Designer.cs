// <auto-generated />
using System;
using Exams_App_C__.Net_Server.Data.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exams_App_C__.Net_Server.Migrations
{
    [DbContext(typeof(ExamsDbContext))]
    [Migration("20240316224905_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = "a-61",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2637),
                            IsCorrect = true,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-2",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2697),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-3",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2700),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-4",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2704),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-21",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2707),
                            IsCorrect = true,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-22",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2710),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-23",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2720),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-24",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2723),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-31",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2765),
                            IsCorrect = true,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-32",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2768),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-33",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2772),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-34",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2774),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CourseEndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CourseStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "c-1",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2921),
                            CourseName = "Introduction to Programming",
                            CourseStartingDate = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2919),
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2913)
                        },
                        new
                        {
                            Id = "c-2",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2932),
                            CourseName = "Introduction to Programming 2",
                            CourseStartingDate = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2931),
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2929)
                        },
                        new
                        {
                            Id = "c-3",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2941),
                            CourseName = "Introduction to Programming 3",
                            CourseStartingDate = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2939),
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2938)
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ExamDurationInMinutes")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("ExamGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOrderQuestionsRandom")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartExamDateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = "e-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2966),
                            ExamDescription = "Description of Midterm Exam",
                            ExamDurationInMinutes = 120,
                            ExamGradeAvg = 0f,
                            ExamName = "Midterm Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 3, 24, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2969),
                            TeacherId = "t-1"
                        },
                        new
                        {
                            Id = "e-2",
                            CourseId = "c-2",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2977),
                            ExamDescription = "Description of Final Exam",
                            ExamDurationInMinutes = 180,
                            ExamGradeAvg = 0f,
                            ExamName = "Final Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 3, 31, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2980),
                            TeacherId = "t-1"
                        },
                        new
                        {
                            Id = "e-3",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2984),
                            ExamDescription = "Description of Quiz 1",
                            ExamDurationInMinutes = 60,
                            ExamGradeAvg = 0f,
                            ExamName = "Quiz 1",
                            IsOrderQuestionsRandom = false,
                            StartExamDateTime = new DateTime(2024, 4, 7, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(2985),
                            TeacherId = "t-1"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOrderAnswersRandom")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionScoring")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("StudentExamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "q-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3013),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-2",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3018),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-3",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3023),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-4",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3027),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-5",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3034),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-6",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3038),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-7",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3043),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the largest ocean on Earth?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-8",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3047),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "Which planet is known as the Red Planet?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-9",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3051),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the chemical symbol for water?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExamStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasExamLoggedInToByStudent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsExams");

                    b.HasData(
                        new
                        {
                            Id = "se-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3082),
                            ExamId = "e-1",
                            ExamStartTime = new DateTime(2024, 3, 16, 22, 49, 5, 24, DateTimeKind.Local).AddTicks(3088),
                            Grade = 90,
                            StudentId = "s-1",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-2",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3091),
                            ExamId = "e-2",
                            ExamStartTime = new DateTime(2024, 3, 16, 21, 49, 5, 24, DateTimeKind.Local).AddTicks(3093),
                            Grade = 85,
                            StudentId = "s-2",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-3",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3096),
                            ExamId = "e-3",
                            ExamStartTime = new DateTime(2024, 3, 16, 20, 49, 5, 24, DateTimeKind.Local).AddTicks(3098),
                            Grade = 95,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-4",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3102),
                            ExamId = "e-1",
                            ExamStartTime = new DateTime(2024, 3, 16, 19, 49, 5, 24, DateTimeKind.Local).AddTicks(3104),
                            Grade = 80,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("StudentGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "a-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3128),
                            Email = "leahwalden4@gmail.com",
                            FullName = "The Admin",
                            PasswordHash = "adminPassw0rd!",
                            UserName = "admin",
                            UserRole = "Admin"
                        },
                        new
                        {
                            Id = "t-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3134),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            PasswordHash = "password1",
                            UserName = "teacher1",
                            UserRole = "Teacher"
                        },
                        new
                        {
                            Id = "s-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3137),
                            Email = "alice.smith@example.com",
                            FullName = "Alice Smith",
                            PasswordHash = "password1",
                            StudentGradeAvg = 0f,
                            UserName = "student1",
                            UserRole = "Student"
                        },
                        new
                        {
                            Id = "s-2",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 17, 0, 49, 5, 24, DateTimeKind.Local).AddTicks(3141),
                            Email = "rifka.smith@example.com",
                            FullName = "Rifka Smith",
                            PasswordHash = "password2",
                            StudentGradeAvg = 0f,
                            UserName = "student2",
                            UserRole = "Student"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", null)
                        .WithMany("Exams")
                        .HasForeignKey("CourseId");

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("TeachersExams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.StudentExam", null)
                        .WithMany("QuestionsFailed")
                        .HasForeignKey("StudentExamId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("StudentsExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("StudentsTakenExams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", null)
                        .WithMany("Users")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentsExams");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Navigation("QuestionsFailed");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Navigation("StudentsTakenExams");

                    b.Navigation("TeachersExams");
                });
#pragma warning restore 612, 618
        }
    }
}
