// <auto-generated />
using System;
using Exams_App_C__.Net_Server.Data.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exams_App_C__.Net_Server.Migrations
{
    [DbContext(typeof(ExamsDbContext))]
    [Migration("20240310141243_V2")]
    partial class V2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<string>("CoursesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("AnswerNumber")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = "a-1",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7056),
                            IsCorrect = true,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-2",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7118),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-3",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7121),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-4",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7124),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-21",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7126),
                            IsCorrect = true,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-22",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7140),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-23",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7143),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-24",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7145),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-31",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7148),
                            IsCorrect = true,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-32",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7150),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-33",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7153),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-34",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7155),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CourseEndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CourseStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "c-1",
                            AdminId = "a-1",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7293),
                            CourseName = "Introduction to Programming",
                            CourseStartingDate = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7292),
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7285)
                        },
                        new
                        {
                            Id = "c-2",
                            AdminId = "a-1",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7305),
                            CourseName = "Introduction to Programming 2",
                            CourseStartingDate = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7304),
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7302)
                        },
                        new
                        {
                            Id = "c-3",
                            AdminId = "a-1",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 6, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7311),
                            CourseName = "Introduction to Programming 3",
                            CourseStartingDate = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7309),
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7308)
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndExamDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ExamDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<float>("ExamGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsOrderQuestionsRandom")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartExamDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = "e-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7368),
                            EndExamDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamDescription = "Description of Midterm Exam",
                            ExamDurationInMinutes = 120,
                            ExamGradeAvg = 0f,
                            ExamName = "Midterm Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 3, 17, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7374),
                            TeacherId = "t-1"
                        },
                        new
                        {
                            Id = "e-2",
                            CourseId = "c-2",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7379),
                            EndExamDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamDescription = "Description of Final Exam",
                            ExamDurationInMinutes = 180,
                            ExamGradeAvg = 0f,
                            ExamName = "Final Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 3, 24, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7382),
                            TeacherId = "t-1"
                        },
                        new
                        {
                            Id = "e-3",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7385),
                            EndExamDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamDescription = "Description of Quiz 1",
                            ExamDurationInMinutes = 60,
                            ExamGradeAvg = 0f,
                            ExamName = "Quiz 1",
                            IsOrderQuestionsRandom = false,
                            StartExamDateTime = new DateTime(2024, 3, 31, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7386),
                            TeacherId = "t-1"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrderAnswersRandom")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("QuestionNumber")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("QuestionScoring")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("StudentExamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "q-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7418),
                            ExamId = "e-1",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-2",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7423),
                            ExamId = "e-1",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-3",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7428),
                            ExamId = "e-1",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-4",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7434),
                            ExamId = "e-2",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-5",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7438),
                            ExamId = "e-2",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-6",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7442),
                            ExamId = "e-2",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-7",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7447),
                            ExamId = "e-3",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the largest ocean on Earth?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-8",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7451),
                            ExamId = "e-3",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "Which planet is known as the Red Planet?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-9",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7455),
                            ExamId = "e-3",
                            IsImage = false,
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the chemical symbol for water?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExamStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasExamLoggedInToByStudent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsExams");

                    b.HasData(
                        new
                        {
                            Id = "se-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7485),
                            ExamId = "e-1",
                            ExamStartTime = new DateTime(2024, 3, 10, 14, 12, 43, 250, DateTimeKind.Local).AddTicks(7490),
                            Grade = 90,
                            StudentId = "s-1",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-2",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7493),
                            ExamId = "e-2",
                            ExamStartTime = new DateTime(2024, 3, 10, 13, 12, 43, 250, DateTimeKind.Local).AddTicks(7496),
                            Grade = 85,
                            StudentId = "s-2",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-3",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7500),
                            ExamId = "e-3",
                            ExamStartTime = new DateTime(2024, 3, 10, 12, 12, 43, 250, DateTimeKind.Local).AddTicks(7502),
                            Grade = 95,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-4",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7505),
                            ExamId = "e-1",
                            ExamStartTime = new DateTime(2024, 3, 10, 11, 12, 43, 250, DateTimeKind.Local).AddTicks(7506),
                            Grade = 80,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("StudentGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "a-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7530),
                            Email = "leahwalden4@gmail.com",
                            FullName = "The Admin",
                            PasswordHash = "adminPassw0rd!",
                            StudentGradeAvg = 0f,
                            UserName = "admin",
                            UserRole = "Admin"
                        },
                        new
                        {
                            Id = "t-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7535),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            PasswordHash = "password1",
                            StudentGradeAvg = 0f,
                            UserName = "teacher1",
                            UserRole = "Teacher"
                        },
                        new
                        {
                            Id = "s-1",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7539),
                            Email = "alice.smith@example.com",
                            FullName = "Alice Smith",
                            PasswordHash = "password1",
                            StudentGradeAvg = 0f,
                            UserName = "student1",
                            UserRole = "Student"
                        },
                        new
                        {
                            Id = "s-2",
                            CreatedAt = new DateTime(2024, 3, 10, 16, 12, 43, 250, DateTimeKind.Local).AddTicks(7542),
                            Email = "rifka.smith@example.com",
                            FullName = "Rifka Smith",
                            PasswordHash = "password2",
                            StudentGradeAvg = 0f,
                            UserName = "student2",
                            UserRole = "Student"
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("TeachersExams")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.StudentExam", null)
                        .WithMany("QuestionsFailed")
                        .HasForeignKey("StudentExamId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("StudentsExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("StudentsTakenExams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentsExams");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Navigation("QuestionsFailed");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Navigation("StudentsTakenExams");

                    b.Navigation("TeachersExams");
                });
#pragma warning restore 612, 618
        }
    }
}
