// <auto-generated />
using System;
using Exams_App_C__.Net_Server.Data.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exams_App_C__.Net_Server.Migrations
{
    [DbContext(typeof(ExamsDbContext))]
    [Migration("20240404121315_v11")]
    partial class v11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = "a-101",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6604),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-2",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6679),
                            IsCorrect = true,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-3",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6683),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-4",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6711),
                            IsCorrect = false,
                            QuestionId = "q-1"
                        },
                        new
                        {
                            Id = "a-21",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6720),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-22",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6723),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-23",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6727),
                            IsCorrect = true,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-24",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6736),
                            IsCorrect = false,
                            QuestionId = "q-2"
                        },
                        new
                        {
                            Id = "a-31",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6746),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-32",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6749),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-33",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6752),
                            IsCorrect = false,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-34",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6756),
                            IsCorrect = true,
                            QuestionId = "q-3"
                        },
                        new
                        {
                            Id = "a-41",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6764),
                            IsCorrect = true,
                            QuestionId = "q-4"
                        },
                        new
                        {
                            Id = "a-42",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6784),
                            IsCorrect = false,
                            QuestionId = "q-4"
                        },
                        new
                        {
                            Id = "a-43",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6788),
                            IsCorrect = false,
                            QuestionId = "q-4"
                        },
                        new
                        {
                            Id = "a-44",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6794),
                            IsCorrect = false,
                            QuestionId = "q-4"
                        },
                        new
                        {
                            Id = "a-51",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6797),
                            IsCorrect = true,
                            QuestionId = "q-5"
                        },
                        new
                        {
                            Id = "a-52",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6800),
                            IsCorrect = false,
                            QuestionId = "q-5"
                        },
                        new
                        {
                            Id = "a-53",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6803),
                            IsCorrect = false,
                            QuestionId = "q-5"
                        },
                        new
                        {
                            Id = "a-54",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6806),
                            IsCorrect = false,
                            QuestionId = "q-5"
                        },
                        new
                        {
                            Id = "a-61",
                            AnswerDescription = "Paris",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6809),
                            IsCorrect = true,
                            QuestionId = "q-6"
                        },
                        new
                        {
                            Id = "a-62",
                            AnswerDescription = "London",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6812),
                            IsCorrect = false,
                            QuestionId = "q-6"
                        },
                        new
                        {
                            Id = "a-63",
                            AnswerDescription = "Berlin",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6815),
                            IsCorrect = false,
                            QuestionId = "q-6"
                        },
                        new
                        {
                            Id = "a-64",
                            AnswerDescription = "Rome",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6821),
                            IsCorrect = false,
                            QuestionId = "q-6"
                        },
                        new
                        {
                            Id = "a-71",
                            AnswerDescription = "Pacific Ocean",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6832),
                            IsCorrect = true,
                            QuestionId = "q-7"
                        },
                        new
                        {
                            Id = "a-72",
                            AnswerDescription = "Atlantic Ocean",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6835),
                            IsCorrect = false,
                            QuestionId = "q-7"
                        },
                        new
                        {
                            Id = "a-73",
                            AnswerDescription = "Indian Ocean",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6844),
                            IsCorrect = false,
                            QuestionId = "q-7"
                        },
                        new
                        {
                            Id = "a-74",
                            AnswerDescription = "Arctic Ocean",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6880),
                            IsCorrect = false,
                            QuestionId = "q-7"
                        },
                        new
                        {
                            Id = "a-81",
                            AnswerDescription = "Mercury",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6916),
                            IsCorrect = true,
                            QuestionId = "q-8"
                        },
                        new
                        {
                            Id = "a-82",
                            AnswerDescription = "Atlantic Ocean",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6921),
                            IsCorrect = false,
                            QuestionId = "q-8"
                        },
                        new
                        {
                            Id = "a-83",
                            AnswerDescription = "Indian Ocean",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6924),
                            IsCorrect = false,
                            QuestionId = "q-8"
                        },
                        new
                        {
                            Id = "a-84",
                            AnswerDescription = "Arctic Ocean",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6929),
                            IsCorrect = false,
                            QuestionId = "q-8"
                        },
                        new
                        {
                            Id = "a-91",
                            AnswerDescription = "Mercury",
                            AnswerNumber = 1,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6932),
                            IsCorrect = true,
                            QuestionId = "q-9"
                        },
                        new
                        {
                            Id = "a-92",
                            AnswerDescription = "Atlantic Ocean",
                            AnswerNumber = 2,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6936),
                            IsCorrect = false,
                            QuestionId = "q-9"
                        },
                        new
                        {
                            Id = "a-93",
                            AnswerDescription = "Indian Ocean",
                            AnswerNumber = 3,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6939),
                            IsCorrect = false,
                            QuestionId = "q-9"
                        },
                        new
                        {
                            Id = "a-94",
                            AnswerDescription = "Arctic Ocean",
                            AnswerNumber = 4,
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(6942),
                            IsCorrect = false,
                            QuestionId = "q-9"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CourseEndingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CourseStartingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "c-1",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 7, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7101),
                            CourseName = "Introduction to Programming",
                            CourseStartingDate = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7099),
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7094)
                        },
                        new
                        {
                            Id = "c-2",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 7, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7115),
                            CourseName = "Introduction to Programming 2",
                            CourseStartingDate = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7114),
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7111)
                        },
                        new
                        {
                            Id = "c-3",
                            CourseDescription = "This course provides an introduction to programming concepts using a variety of languages.",
                            CourseEndingDate = new DateTime(2024, 7, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7122),
                            CourseName = "Introduction to Programming 3",
                            CourseStartingDate = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7120),
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7118)
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ExamDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<float?>("ExamGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOrderQuestionsRandom")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartExamDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = "e-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7159),
                            ExamDescription = "Description of Midterm Exam",
                            ExamDurationInMinutes = 120,
                            ExamGradeAvg = 0f,
                            ExamName = "Midterm Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 4, 11, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7165),
                            TeacherId = "t-1",
                            TeacherName = "John Doe"
                        },
                        new
                        {
                            Id = "e-2",
                            CourseId = "c-2",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7172),
                            ExamDescription = "Description of Final Exam",
                            ExamDurationInMinutes = 180,
                            ExamGradeAvg = 0f,
                            ExamName = "Final Exam",
                            IsOrderQuestionsRandom = true,
                            StartExamDateTime = new DateTime(2024, 4, 18, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7210),
                            TeacherId = "t-1",
                            TeacherName = "John Doe"
                        },
                        new
                        {
                            Id = "e-3",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7214),
                            ExamDescription = "Description of Quiz 1",
                            ExamDurationInMinutes = 60,
                            ExamGradeAvg = 0f,
                            ExamName = "Quiz 1",
                            IsOrderQuestionsRandom = false,
                            StartExamDateTime = new DateTime(2024, 4, 25, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7217),
                            TeacherId = "t-1",
                            TeacherName = "John Doe"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("IsOrderAnswersRandom")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionScoring")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "q-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7253),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-2",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7259),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-3",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7265),
                            ExamId = "e-1",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-4",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7271),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of the United Kingdom?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-5",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7276),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Germany?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-6",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7282),
                            ExamId = "e-2",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the capital of Italy?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-7",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7286),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the largest ocean on Earth?",
                            QuestionNumber = 1,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-8",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7289),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "Which planet is known as the Red Planet?",
                            QuestionNumber = 2,
                            QuestionScoring = 1
                        },
                        new
                        {
                            Id = "q-9",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7293),
                            ExamId = "e-3",
                            IsOrderAnswersRandom = true,
                            QuestionDescription = "What is the chemical symbol for water?",
                            QuestionNumber = 3,
                            QuestionScoring = 1
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.QuestionFailed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChosenWrongAnswerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChosenWrongAnswerNumber")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectAnswerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionScoring")
                        .HasColumnType("int");

                    b.Property<string>("StudentExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentExamId");

                    b.ToTable("QuestionsFailed");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExamStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasExamLoggedInToByStudent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsExams");

                    b.HasData(
                        new
                        {
                            Id = "se-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7331),
                            ExamId = "e-1",
                            Grade = 90,
                            StudentId = "s-1",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-2",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7339),
                            ExamId = "e-2",
                            Grade = 85,
                            StudentId = "s-2",
                            StudentName = "Alice Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-3",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7342),
                            ExamId = "e-3",
                            Grade = 95,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        },
                        new
                        {
                            Id = "se-4",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7346),
                            ExamId = "e-1",
                            Grade = 80,
                            StudentId = "s-2",
                            StudentName = "Rifka Smith",
                            WasExamLoggedInToByStudent = true
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("StudentGradeAvg")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "a-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 712, DateTimeKind.Local).AddTicks(7382),
                            Email = "leahwalden4@gmail.com",
                            FullName = "The Admin",
                            PasswordHash = "$2a$10$dVBkC6iXU5z.5M7gP1P23uw3TNKtz8p5D/VlPxJeipf9KxwDBOoja",
                            UserName = "admin",
                            UserRole = "Admin"
                        },
                        new
                        {
                            Id = "t-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 782, DateTimeKind.Local).AddTicks(2869),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            PasswordHash = "$2a$10$pP.878fORlGVMiYALFjhvOK1QK/H5tcZ/HhcdsumS9ThX2vycSfhy",
                            UserName = "teacher1",
                            UserRole = "Teacher"
                        },
                        new
                        {
                            Id = "s-1",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 848, DateTimeKind.Local).AddTicks(8843),
                            Email = "alice.smith@example.com",
                            FullName = "Alice Smith",
                            PasswordHash = "$2a$10$DPn8tNF/o4fenvwOuWDELO/kAGFuZr/j5chjvxm9HgZczbT8hewLi",
                            StudentGradeAvg = 0f,
                            UserName = "student1",
                            UserRole = "Student"
                        },
                        new
                        {
                            Id = "s-2",
                            CourseId = "c-1",
                            CreatedAt = new DateTime(2024, 4, 4, 15, 13, 14, 916, DateTimeKind.Local).AddTicks(2582),
                            Email = "rifka.smith@example.com",
                            FullName = "Rifka Smith",
                            PasswordHash = "$2a$10$GSpqzeI2rL3SOAtC/VQDm.tTbB4H/4ekJ.aIiA1E.Tc6WKWSZGnRi",
                            StudentGradeAvg = 0f,
                            UserName = "student2",
                            UserRole = "Student"
                        });
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Answer", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", null)
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("TeachersExams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.QuestionFailed", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.StudentExam", null)
                        .WithMany("QuestionsFailed")
                        .HasForeignKey("StudentExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Exam", null)
                        .WithMany("StudentsExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.User", null)
                        .WithMany("StudentsTakenExams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.HasOne("Exams_App_C__.Net_Server.Data.Models.Course", null)
                        .WithMany("Users")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentsExams");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.StudentExam", b =>
                {
                    b.Navigation("QuestionsFailed");
                });

            modelBuilder.Entity("Exams_App_C__.Net_Server.Data.Models.User", b =>
                {
                    b.Navigation("StudentsTakenExams");

                    b.Navigation("TeachersExams");
                });
#pragma warning restore 612, 618
        }
    }
}
